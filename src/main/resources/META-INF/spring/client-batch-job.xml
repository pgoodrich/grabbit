<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2015 Time Warner Cable, Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch
       http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <!--
        Spring beans are by default, Singletons. It is thus important to make sure that your beans, especially,
        the Tasklets, ItemReaders, ItemWriters, etc. are thread-safe. Otherwise, if you have instance level variables
        you will have concurrency issues and mutating states for your instance variables.
        Thus, if you think that your batch job is going to be run in a Concurrent Environment, don't use instance level
        variables for your readers, writers, processors and tasklets,
    -->

    <import resource="client-batch-job-context.xml"/>

    <import resource="client-validateJob.xml" />
    <import resource="client-namespace-step.xml" />
    <import resource="client-jcrNodes-step.xml" />
    <import resource="client-deleteBeforeWrite-steps.xml" />
    <import resource="client-batch-http.xml" />

    <batch:job id="clientJob" xmlns="http://www.springframework.org/schema/batch" job-repository="clientJobRepository">

        <batch:decision id="validateJob" decider="validJobDecider">
            <next on="VALID" to="clientWorkflowOff" />
            <fail on="INVALID" exit-code="VALIDATION_FAILED" />
        </batch:decision>

        <batch:step id="clientWorkflowOff" next="deleteBeforeWriteDecision">
            <batch:tasklet ref="clientWorkflowOffTasklet" transaction-manager="clientTransactionManager"/>
        </batch:step>

        <batch:decision id="deleteBeforeWriteDecision" decider="deleteBeforeWriteDecider">
            <next on="NO" to="startHttpConnection"/>
            <next on="YES" to="deleteBeforeWrite" />
        </batch:decision>

        <batch:step id="deleteBeforeWrite" next="startHttpConnection">
            <batch:tasklet ref="deleteBeforeWriteTasklet" transaction-manager="clientTransactionManager"/>
        </batch:step>

        <batch:step id="startHttpConnection" next="clientNamespaceSync">
            <batch:tasklet ref="createHttpConnectionTasklet" transaction-manager="clientTransactionManager"/>
        </batch:step>

        <!-- Writes JCR namespaces streamed from the server-->
        <batch:step id="clientNamespaceSync" next="clientJcrNodes">
            <batch:tasklet ref="clientNamespaceSyncTasklet" transaction-manager="clientTransactionManager"/>
        </batch:step>

        <batch:step id="clientJcrNodes" next="clientWorkflowOn">
            <batch:tasklet transaction-manager="clientTransactionManager">
                <batch:chunk reader="clientProtobufNodesReader" writer="clientJcrNodesWriter"
                            commit-interval="#{jobParameters[batchSize]}" skip-limit="0"/>
                <listeners>
                    <listener ref="loggingStepExecutionListener"/>
                </listeners>
            </batch:tasklet>
        </batch:step>

        <batch:step id="clientWorkflowOn">
            <batch:tasklet ref="clientWorkflowOnTasklet" transaction-manager="clientTransactionManager"/>
        </batch:step>

        <batch:listeners>
            <listener ref="clientBatchJobListener"/>
        </batch:listeners>
    </batch:job>


    <bean id="clientBatchJobListener" class="com.twcable.grabbit.client.batch.ClientBatchJobExecutionListener" >
        <property name="slingRepository" ref="slingRepository"/>
    </bean>

    <!-- Used to log progress each step of the way -->
    <bean id="loggingStepExecutionListener" class="com.twcable.grabbit.client.batch.steps.jcrnodes.LoggingStepExecutionListener" />

</beans>
